#!/bin/bash

# VLESS Reality 速度优化增强版
# 新增：XTLS Vision、BBR、完整系统优化

set -e
export LANG=C.UTF-8

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m'

info() { echo -e "${GREEN}[✓]${NC} $1"; }
warn() { echo -e "${YELLOW}[!]${NC} $1"; }
error() { echo -e "${RED}[✗]${NC} $1"; exit 1; }

[[ $EUID -ne 0 ]] && error "需要 root 权限"

# 配置变量
XRAY_DIR="/usr/local/etc/xray"
CLIENT_DIR="/root/vless-clients"
WEB_DIR="/var/www/html"
SERVER_IP=""
USER_UUID=""
PRIVATE_KEY=""
PUBLIC_KEY=""
SHORT_ID=""
LISTEN_PORT=443
REALITY_DEST="www.microsoft.com"
REALITY_PORT=443

# 检测系统
info "检测系统环境..."
if [[ -f /etc/os-release ]]; then
    . /etc/os-release
    OS=$ID
    info "系统: $OS $VERSION_ID"
else
    error "无法识别系统"
fi

# 安装依赖
info "安装依赖软件..."
if [[ "$OS" == "ubuntu" ]] || [[ "$OS" == "debian" ]]; then
    export DEBIAN_FRONTEND=noninteractive
    apt-get update -qq
    apt-get install -y -qq curl wget unzip qrencode nginx net-tools >/dev/null 2>&1
elif [[ "$OS" == "centos" ]] || [[ "$OS" == "rocky" ]] || [[ "$OS" == "almalinux" ]]; then
    yum install -y -q curl wget unzip qrencode nginx net-tools >/dev/null 2>&1
fi

# 获取 IP
info "获取服务器 IP..."
SERVER_IP=$(curl -s --max-time 10 https://api.ipify.org 2>/dev/null)
[[ -z "$SERVER_IP" ]] && SERVER_IP=$(curl -s --max-time 10 https://icanhazip.com 2>/dev/null)
[[ -z "$SERVER_IP" ]] && SERVER_IP=$(hostname -I | awk '{print $1}')
[[ -z "$SERVER_IP" ]] && read -p "请输入服务器IP: " SERVER_IP
[[ -z "$SERVER_IP" ]] && error "无法获取 IP"
info "服务器 IP: $SERVER_IP"

# Reality 目标选择
info "选择伪装目标..."
echo ""
echo "1) www.microsoft.com (推荐)"
echo "2) www.apple.com"
echo "3) www.cloudflare.com"
echo "4) download.docker.com"
echo "5) github.com"
echo ""
read -p "选择 [1-5, 默认1]: " choice

case ${choice:-1} in
    1) REALITY_DEST="www.microsoft.com" ;;
    2) REALITY_DEST="www.apple.com" ;;
    3) REALITY_DEST="www.cloudflare.com" ;;
    4) REALITY_DEST="download.docker.com" ;;
    5) REALITY_DEST="github.com" ;;
    *) REALITY_DEST="www.microsoft.com" ;;
esac

info "目标: $REALITY_DEST"

# 下载 Xray
info "下载 Xray-core..."
ARCH=$(uname -m)
case $ARCH in
    x86_64) XRAY_ARCH="64" ;;
    aarch64) XRAY_ARCH="arm64-v8a" ;;
    *) error "不支持的架构: $ARCH" ;;
esac

VERSION="1.8.10"
URL="https://github.com/XTLS/Xray-core/releases/download/v${VERSION}/Xray-linux-${XRAY_ARCH}.zip"

cd /tmp
rm -rf xray.zip xray
wget -q --show-progress "$URL" -O xray.zip || \
    wget -q --show-progress "https://ghproxy.com/$URL" -O xray.zip || \
    error "下载失败"

info "安装 Xray..."
unzip -q xray.zip
mkdir -p /usr/local/bin /usr/local/share/xray "$XRAY_DIR" /var/log/xray
mv xray /usr/local/bin/
chmod +x /usr/local/bin/xray
[[ -f geoip.dat ]] && mv geoip.dat /usr/local/share/xray/
[[ -f geosite.dat ]] && mv geosite.dat /usr/local/share/xray/
rm -rf /tmp/xray*

/usr/local/bin/xray version >/dev/null 2>&1 || error "Xray 安装失败"
info "Xray 安装成功"

# 生成密钥
info "生成配置密钥..."
USER_UUID=$(cat /proc/sys/kernel/random/uuid)
KEY_OUTPUT=$(/usr/local/bin/xray x25519)
PRIVATE_KEY=$(echo "$KEY_OUTPUT" | grep "Private key" | awk '{print $3}')
PUBLIC_KEY=$(echo "$KEY_OUTPUT" | grep "Public key" | awk '{print $3}')
SHORT_ID=$(openssl rand -hex 8)

# 智能选择端口
if netstat -tuln 2>/dev/null | grep -q ":443 " || ss -tuln 2>/dev/null | grep -q ":443 "; then
    COMMON_PORTS=(8443 2053 2083 2087 2096 8880)
    LISTEN_PORT=${COMMON_PORTS[$RANDOM % ${#COMMON_PORTS[@]}]}
    warn "443 被占用，使用端口 $LISTEN_PORT"
else
    LISTEN_PORT=443
fi

info "UUID: $USER_UUID"
info "端口: $LISTEN_PORT"

# 配置 Nginx
info "配置 Nginx 伪装..."
mkdir -p "$WEB_DIR"

cat > "$WEB_DIR/index.html" <<'HTML'
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; }
        p { color: #666; line-height: 1.6; }
        .status { color: #28a745; font-weight: bold; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Server Status</h1>
        <p class="status">● Service Running</p>
        <p>This is a private server. If you're seeing this page, the service is working correctly.</p>
        <hr>
        <p style="color: #999; font-size: 12px;">Last updated: <script>document.write(new Date().toLocaleString())</script></p>
    </div>
</body>
</html>
HTML

cat > /etc/nginx/sites-available/default <<NGINX
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    root $WEB_DIR;
    index index.html;
    server_tokens off;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    location / {
        try_files \$uri \$uri/ =404;
    }
    location ~ /\. {
        deny all;
    }
}
NGINX

systemctl enable nginx >/dev/null 2>&1
systemctl restart nginx >/dev/null 2>&1

# 生成 Xray 配置（完整版）
info "生成 Xray 配置..."
cat > "$XRAY_DIR/config.json" <<EOF
{
    "log": {
        "loglevel": "warning"
    },
    "inbounds": [
        {
            "listen": "0.0.0.0",
            "port": $LISTEN_PORT,
            "protocol": "vless",
            "settings": {
                "clients": [
                    {
                        "id": "$USER_UUID",
                        "flow": "xtls-rprx-vision"
                    }
                ],
                "decryption": "none",
                "fallbacks": [
                    {
                        "dest": 80
                    }
                ]
            },
            "streamSettings": {
                "network": "tcp",
                "security": "reality",
                "realitySettings": {
                    "show": false,
                    "dest": "$REALITY_DEST:$REALITY_PORT",
                    "xver": 0,
                    "serverNames": [
                        "$REALITY_DEST"
                    ],
                    "privateKey": "$PRIVATE_KEY",
                    "shortIds": [
                        "$SHORT_ID",
                        ""
                    ]
                },
                "tcpSettings": {
                    "acceptProxyProtocol": false
                },
                "sockopt": {
                    "tcpFastOpen": true,
                    "tcpKeepAliveInterval": 30
                }
            },
            "sniffing": {
                "enabled": true,
                "destOverride": ["http", "tls", "quic"]
            }
        }
    ],
    "outbounds": [
        {
            "protocol": "freedom",
            "settings": {
                "domainStrategy": "UseIPv4"
            },
            "tag": "direct"
        },
        {
            "protocol": "blackhole",
            "tag": "block"
        }
    ],
    "routing": {
        "domainStrategy": "IPIfNonMatch",
        "rules": [
            {
                "type": "field",
                "ip": ["geoip:private"],
                "outboundTag": "block"
            },
            {
                "type": "field",
                "protocol": ["bittorrent"],
                "outboundTag": "block"
            }
        ]
    }
}
EOF

# 验证配置（兼容性检查）
info "验证 Xray 配置..."
if /usr/local/bin/xray help 2>&1 | grep -q "test"; then
    if ! /usr/local/bin/xray test -c "$XRAY_DIR/config.json" 2>/dev/null; then
        warn "配置验证命令不可用，将尝试直接启动"
    else
        info "配置验证通过"
    fi
else
    info "跳过配置验证（版本不支持），将直接启动"
fi

# 创建服务
info "创建 Xray 服务..."
cat > /etc/systemd/system/xray.service <<EOF
[Unit]
Description=Xray Service
After=network.target network-online.target
Wants=network-online.target

[Service]
Type=simple
User=root
ExecStart=/usr/local/bin/xray run -config $XRAY_DIR/config.json
Restart=on-failure
RestartSec=10
LimitNOFILE=1000000

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable xray
systemctl start xray
sleep 3

if ! systemctl is-active --quiet xray; then
    error "Xray 启动失败，查看日志: journalctl -u xray -n 50"
fi

info "Xray 服务运行正常"

# 防火墙
info "配置防火墙..."
if command -v ufw >/dev/null 2>&1; then
    ufw allow 80/tcp >/dev/null 2>&1
    ufw allow $LISTEN_PORT/tcp >/dev/null 2>&1
elif command -v firewall-cmd >/dev/null 2>&1; then
    firewall-cmd --permanent --add-port=80/tcp >/dev/null 2>&1
    firewall-cmd --permanent --add-port=$LISTEN_PORT/tcp >/dev/null 2>&1
    firewall-cmd --reload >/dev/null 2>&1
fi

# 系统优化
info "优化系统性能..."
if ! grep -q "net.core.default_qdisc" /etc/sysctl.conf; then
    cat >> /etc/sysctl.conf <<EOF

# Xray 性能优化
net.core.default_qdisc=fq
net.ipv4.tcp_congestion_control=bbr
net.ipv4.tcp_fastopen=3
net.ipv4.tcp_slow_start_after_idle=0
net.core.rmem_max=134217728
net.core.wmem_max=134217728
net.ipv4.tcp_rmem=4096 87380 134217728
net.ipv4.tcp_wmem=4096 65536 134217728
net.core.netdev_max_backlog=16384
fs.file-max=1000000
net.ipv4.ip_local_port_range=1024 65535
EOF
    sysctl -p >/dev/null 2>&1
    info "BBR 加速已启用"
fi

# 生成客户端配置
info "生成客户端配置..."
mkdir -p "$CLIENT_DIR"

SHARE_LINK="vless://${USER_UUID}@${SERVER_IP}:${LISTEN_PORT}?encryption=none&flow=xtls-rprx-vision&security=reality&sni=${REALITY_DEST}&fp=chrome&pbk=${PUBLIC_KEY}&sid=${SHORT_ID}&type=tcp&headerType=none#Reality-${REALITY_DEST%%.*}"

cat > "$CLIENT_DIR/config.txt" <<EOF
╔════════════════════════════════════════════════════╗
║      VLESS Reality 配置信息 (速度优化版)          ║
╚════════════════════════════════════════════════════╝

【连接信息】
服务器地址: $SERVER_IP
端口: $LISTEN_PORT
UUID: $USER_UUID
传输协议: tcp
流控: xtls-rprx-vision (关键!)
安全类型: reality
SNI: $REALITY_DEST
Fingerprint: chrome
公钥: $PUBLIC_KEY
Short ID: $SHORT_ID

【性能优化】
✓ XTLS Vision 流控 - 提速 30-50%
✓ BBR 拥塞控制 - 已启用
✓ TCP Fast Open - 减少延迟
✓ 大缓冲区优化 - 提高吞吐

【防封措施】
✓ Reality 协议 - 流量完全伪装
✓ Nginx 伪装站 - 端口 80
✓ 智能回落 - 非法探测回落

【使用建议】
1. 客户端必须支持 XTLS Vision
2. 流控必须选择: xtls-rprx-vision
3. 不要开启 Mux 多路复用
4. 建议配置分流规则

【客户端推荐】
• Windows: v2rayN (5.39+)
• Android: v2rayNG (1.8.5+) / NekoBox
• iOS: Shadowrocket / Stash
• macOS: V2RayXS

【分享链接】
$SHARE_LINK

生成时间: $(date)
EOF

echo "$SHARE_LINK" > "$CLIENT_DIR/link.txt"

if command -v qrencode >/dev/null 2>&1; then
    qrencode -t ANSIUTF8 "$SHARE_LINK" > "$CLIENT_DIR/qr.txt" 2>/dev/null
fi

# 管理脚本
cat > /usr/local/bin/vless <<'SCRIPT'
#!/bin/bash
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

case "$1" in
    start) systemctl start xray nginx; echo -e "${GREEN}服务已启动${NC}" ;;
    stop) systemctl stop xray nginx; echo -e "${YELLOW}服务已停止${NC}" ;;
    restart) systemctl restart xray nginx; echo -e "${GREEN}服务已重启${NC}" ;;
    status) 
        echo "=== Xray ==="
        systemctl status xray --no-pager -l
        echo ""
        echo "=== Nginx ==="
        systemctl status nginx --no-pager -l
        ;;
    log) journalctl -u xray -f ;;
    config) cat /root/vless-clients/config.txt ;;
    link) cat /root/vless-clients/link.txt ;;
    qr) cat /root/vless-clients/qr.txt 2>/dev/null || echo "二维码不存在" ;;
    test)
        echo "测试服务..."
        systemctl is-active xray && echo -e "${GREEN}✓ Xray 运行${NC}" || echo "✗ Xray 未运行"
        systemctl is-active nginx && echo -e "${GREEN}✓ Nginx 运行${NC}" || echo "✗ Nginx 未运行"
        echo ""
        echo "BBR 状态:"
        sysctl net.ipv4.tcp_congestion_control
        ;;
    *)
        echo "VLESS Reality 管理工具"
        echo ""
        echo "用法: vless [命令]"
        echo ""
        echo "  start   - 启动服务"
        echo "  stop    - 停止服务"
        echo "  restart - 重启服务"
        echo "  status  - 查看状态"
        echo "  log     - 查看日志"
        echo "  config  - 显示配置"
        echo "  link    - 显示链接"
        echo "  qr      - 显示二维码"
        echo "  test    - 测试服务"
        ;;
esac
SCRIPT

chmod +x /usr/local/bin/vless

# 显示结果
clear
echo ""
echo -e "${GREEN}╔═══════════════════════════════════════════╗${NC}"
echo -e "${GREEN}║     安装成功！(速度优化版)               ║${NC}"
echo -e "${GREEN}╚═══════════════════════════════════════════╝${NC}"
echo ""
echo -e "${CYAN}【服务器信息】${NC}"
echo "  IP: $SERVER_IP"
echo "  端口: $LISTEN_PORT"
echo "  伪装站: http://$SERVER_IP"
echo ""
echo -e "${CYAN}【性能优化】${NC}"
echo "  ✓ XTLS Vision 流控"
echo "  ✓ BBR 拥塞控制"
echo "  ✓ TCP 优化"
echo ""
echo -e "${CYAN}【管理命令】${NC}"
echo "  vless config - 查看配置"
echo "  vless link   - 显示链接"
echo "  vless test   - 测试服务"
echo "  vless status - 查看状态"
echo ""

if [[ -f "$CLIENT_DIR/qr.txt" ]]; then
    echo -e "${CYAN}【二维码】${NC}"
    cat "$CLIENT_DIR/qr.txt"
    echo ""
fi

echo -e "${CYAN}【分享链接】${NC}"
cat "$CLIENT_DIR/link.txt"
echo ""

info "配置文件: $CLIENT_DIR/config.txt"
info "运行 'vless test' 测试服务"
echo ""