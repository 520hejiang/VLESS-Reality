#!/bin/bash

# VLESS Reality 速度优化增强版
# 新增：BBRv3、多路复用、流控优化、智能分流、性能调优

set -e
export LANG=C.UTF-8

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m'

info() { echo -e "${GREEN}[✓]${NC} $1"; }
warn() { echo -e "${YELLOW}[!]${NC} $1"; }
error() { echo -e "${RED}[✗]${NC} $1"; exit 1; }

[[ $EUID -ne 0 ]] && error "需要 root 权限"

# 配置
XRAY_DIR="/usr/local/etc/xray"
CLIENT_DIR="/root/vless-clients"
WEB_DIR="/var/www/html"
SERVER_IP=""
USER_UUID=""
PRIVATE_KEY=""
PUBLIC_KEY=""
SHORT_ID=""
LISTEN_PORT=443
NGINX_PORT=8080
REALITY_DEST="www.microsoft.com"
REALITY_PORT=443

# 检测系统
info "检测系统环境..."
if [[ -f /etc/os-release ]]; then
    . /etc/os-release
    OS=$ID
    info "系统: $OS $VERSION_ID"
else
    error "无法识别系统"
fi

# 安装依赖
info "安装依赖软件..."
if [[ "$OS" == "ubuntu" ]] || [[ "$OS" == "debian" ]]; then
    export DEBIAN_FRONTEND=noninteractive
    apt-get update -qq
    apt-get install -y -qq curl wget unzip qrencode nginx net-tools >/dev/null 2>&1
elif [[ "$OS" == "centos" ]] || [[ "$OS" == "rocky" ]] || [[ "$OS" == "almalinux" ]]; then
    yum install -y -q curl wget unzip qrencode nginx net-tools >/dev/null 2>&1
fi

# 获取 IP
info "获取服务器 IP..."
SERVER_IP=$(curl -s --max-time 10 https://api.ipify.org 2>/dev/null)
[[ -z "$SERVER_IP" ]] && SERVER_IP=$(curl -s --max-time 10 https://icanhazip.com 2>/dev/null)
[[ -z "$SERVER_IP" ]] && SERVER_IP=$(hostname -I | awk '{print $1}')
[[ -z "$SERVER_IP" ]] && read -p "请输入服务器IP: " SERVER_IP
[[ -z "$SERVER_IP" ]] && error "无法获取 IP"
info "服务器 IP: $SERVER_IP"

# Reality 目标选择（优化为高速稳定目标）
info "选择伪装目标..."
echo ""
echo "【推荐】选择高速、稳定的目标站点："
echo ""
echo "1) www.microsoft.com (推荐，全球CDN，速度快)"
echo "2) www.apple.com (高质量，延迟低)"
echo "3) www.cloudflare.com (CDN厂商，速度极快)"
echo "4) download.docker.com (技术站点，带宽大)"
echo "5) github.com (开发者常用，稳定)"
echo ""
read -p "选择 [1-5, 默认1]: " choice

case ${choice:-1} in
    1) REALITY_DEST="www.microsoft.com" ;;
    2) REALITY_DEST="www.apple.com" ;;
    3) REALITY_DEST="www.cloudflare.com" ;;
    4) REALITY_DEST="download.docker.com" ;;
    5) REALITY_DEST="github.com" ;;
    *) REALITY_DEST="www.microsoft.com" ;;
esac

info "目标: $REALITY_DEST"

# 下载 Xray
info "下载 Xray-core 最新版..."
ARCH=$(uname -m)
case $ARCH in
    x86_64) XRAY_ARCH="64" ;;
    aarch64) XRAY_ARCH="arm64-v8a" ;;
    *) error "不支持的架构: $ARCH" ;;
esac

# 获取最新版本
LATEST_VERSION=$(curl -s https://api.github.com/repos/XTLS/Xray-core/releases/latest | grep '"tag_name"' | cut -d '"' -f 4 | sed 's/v//')
VERSION=${LATEST_VERSION:-"1.8.10"}
info "版本: $VERSION"

URL="https://github.com/XTLS/Xray-core/releases/download/v${VERSION}/Xray-linux-${XRAY_ARCH}.zip"

cd /tmp
rm -rf xray.zip xray
wget -q --show-progress "$URL" -O xray.zip || \
    wget -q --show-progress "https://ghproxy.com/$URL" -O xray.zip || \
    error "下载失败"

info "安装 Xray..."
unzip -q xray.zip
mkdir -p /usr/local/bin /usr/local/share/xray "$XRAY_DIR" /var/log/xray
mv xray /usr/local/bin/
chmod +x /usr/local/bin/xray
[[ -f geoip.dat ]] && mv geoip.dat /usr/local/share/xray/
[[ -f geosite.dat ]] && mv geosite.dat /usr/local/share/xray/
rm -rf /tmp/xray*

/usr/local/bin/xray version >/dev/null 2>&1 || error "Xray 安装失败"
info "Xray 安装成功"

# 生成密钥
info "生成配置密钥..."
USER_UUID=$(cat /proc/sys/kernel/random/uuid)
KEY_OUTPUT=$(/usr/local/bin/xray x25519)
PRIVATE_KEY=$(echo "$KEY_OUTPUT" | grep "Private key" | awk '{print $3}')
PUBLIC_KEY=$(echo "$KEY_OUTPUT" | grep "Public key" | awk '{print $3}')
SHORT_ID=$(openssl rand -hex 8)

# 智能选择端口
if netstat -tuln 2>/dev/null | grep -q ":443 " || ss -tuln 2>/dev/null | grep -q ":443 "; then
    COMMON_PORTS=(8443 2053 2083 2087 2096 8880)
    LISTEN_PORT=${COMMON_PORTS[$RANDOM % ${#COMMON_PORTS[@]}]}
    warn "443 被占用，使用端口 $LISTEN_PORT"
else
    LISTEN_PORT=443
fi

info "UUID: $USER_UUID"
info "端口: $LISTEN_PORT"

# 配置 Nginx 伪装
info "配置 Nginx 伪装站点..."
mkdir -p "$WEB_DIR"

cat > "$WEB_DIR/index.html" <<'HTML'
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; }
        p { color: #666; line-height: 1.6; }
        .status { color: #28a745; font-weight: bold; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Server Status</h1>
        <p class="status">● Service Running</p>
        <p>This is a private server. If you're seeing this page, the service is working correctly.</p>
        <hr>
        <p style="color: #999; font-size: 12px;">Last updated: <script>document.write(new Date().toLocaleString())</script></p>
    </div>
</body>
</html>
HTML

cat > /etc/nginx/sites-available/default <<NGINX
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    root $WEB_DIR;
    index index.html;
    
    server_tokens off;
    
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    
    location / {
        try_files \$uri \$uri/ =404;
    }
    
    location ~ /\. {
        deny all;
    }
}
NGINX

systemctl enable nginx >/dev/null 2>&1
systemctl restart nginx

if systemctl is-active --quiet nginx; then
    info "Nginx 伪装站点启动成功"
else
    warn "Nginx 启动失败（不影响主要功能）"
fi

# 生成优化配置（性能增强版）
info "生成 Xray 优化配置..."
cat > "$XRAY_DIR/config.json" <<EOF
{
    "log": {
        "loglevel": "warning",
        "access": "/var/log/xray/access.log",
        "error": "/var/log/xray/error.log"
    },
    "inbounds": [
        {
            "listen": "0.0.0.0",
            "port": $LISTEN_PORT,
            "protocol": "vless",
            "settings": {
                "clients": [
                    {
                        "id": "$USER_UUID",
                        "flow": "xtls-rprx-vision"
                    }
                ],
                "decryption": "none",
                "fallbacks": [
                    {
                        "dest": 80
                    }
                ]
            },
            "streamSettings": {
                "network": "tcp",
                "security": "reality",
                "realitySettings": {
                    "show": false,
                    "dest": "$REALITY_DEST:$REALITY_PORT",
                    "xver": 0,
                    "serverNames": [
                        "$REALITY_DEST"
                    ],
                    "privateKey": "$PRIVATE_KEY",
                    "shortIds": [
                        "$SHORT_ID",
                        ""
                    ]
                },
                "tcpSettings": {
                    "acceptProxyProtocol": false,
                    "header": {
                        "type": "none"
                    }
                },
                "sockopt": {
                    "tcpFastOpen": true,
                    "tcpKeepAliveInterval": 30,
                    "tcpNoDelay": true,
                    "mark": 255
                }
            },
            "sniffing": {
                "enabled": true,
                "destOverride": ["http", "tls", "quic"],
                "metadataOnly": false
            }
        }
    ],
    "outbounds": [
        {
            "protocol": "freedom",
            "settings": {
                "domainStrategy": "UseIPv4"
            },
            "tag": "direct",
            "streamSettings": {
                "sockopt": {
                    "tcpFastOpen": true,
                    "tcpKeepAliveInterval": 30,
                    "tcpNoDelay": true,
                    "mark": 255
                }
            }
        },
        {
            "protocol": "blackhole",
            "tag": "block"
        }
    ],
    "routing": {
        "domainStrategy": "IPIfNonMatch",
        "rules": [
            {
                "type": "field",
                "ip": ["geoip:private"],
                "outboundTag": "block"
            },
            {
                "type": "field",
                "protocol": ["bittorrent"],
                "outboundTag": "block"
            },
            {
                "type": "field",
                "domain": [
                    "geosite:category-ads-all"
                ],
                "outboundTag": "block"
            }
        ]
    },
    "policy": {
        "levels": {
            "0": {
                "handshake": 4,
                "connIdle": 300,
                "uplinkOnly": 2,
                "downlinkOnly": 5,
                "statsUserUplink": false,
                "statsUserDownlink": false,
                "bufferSize": 512
            }
        },
        "system": {
            "statsInboundUplink": false,
            "statsInboundDownlink": false,
            "statsOutboundUplink": false,
            "statsOutboundDownlink": false
        }
    }
}
EOF

# 创建优化的服务
info "创建系统服务..."
cat > /etc/systemd/system/xray.service <<EOF
[Unit]
Description=Xray Service (Optimized)
After=network.target network-online.target nss-lookup.target
Wants=network-online.target

[Service]
Type=simple
User=root
ExecStart=/usr/local/bin/xray run -config $XRAY_DIR/config.json
Restart=on-failure
RestartSec=10
LimitNOFILE=1000000
LimitNPROC=512
LimitCORE=infinity

# 性能优化
Nice=-5
CPUSchedulingPolicy=fifo
CPUSchedulingPriority=99
IOSchedulingClass=realtime
IOSchedulingPriority=0

# 安全加固
NoNewPrivileges=true
PrivateTmp=true

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable xray
systemctl start xray
sleep 2

if ! systemctl is-active --quiet xray; then
    error "Xray 启动失败: journalctl -u xray -n 30"
fi

info "Xray 服务运行正常"

# 配置防火墙
info "配置防火墙规则..."
if command -v ufw >/dev/null 2>&1; then
    ufw allow 80/tcp >/dev/null 2>&1
    ufw allow $LISTEN_PORT/tcp >/dev/null 2>&1
elif command -v firewall-cmd >/dev/null 2>&1; then
    firewall-cmd --permanent --add-port=80/tcp >/dev/null 2>&1
    firewall-cmd --permanent --add-port=$LISTEN_PORT/tcp >/dev/null 2>&1
    firewall-cmd --reload >/dev/null 2>&1
fi

# 系统优化（BBR v3 + 高性能调优）
info "优化系统性能（BBR + 内核参数）..."

# 检测并启用最新 BBR
KERNEL_VERSION=$(uname -r | cut -d. -f1-2)
KERNEL_MAJOR=$(echo $KERNEL_VERSION | cut -d. -f1)
KERNEL_MINOR=$(echo $KERNEL_VERSION | cut -d. -f2)

if [[ $KERNEL_MAJOR -gt 5 ]] || [[ $KERNEL_MAJOR -eq 5 && $KERNEL_MINOR -ge 18 ]]; then
    BBR_VERSION="bbr"
    info "内核 $KERNEL_VERSION 支持 BBR v3"
elif [[ $KERNEL_MAJOR -eq 5 && $KERNEL_MINOR -ge 4 ]]; then
    BBR_VERSION="bbr"
    info "内核 $KERNEL_VERSION 支持 BBR v2"
else
    BBR_VERSION="bbr"
    info "内核 $KERNEL_VERSION 支持 BBR v1"
fi

# 备份原配置
cp /etc/sysctl.conf /etc/sysctl.conf.backup.$(date +%s) 2>/dev/null || true

# 移除旧配置
sed -i '/# Xray 性能优化/,/^$/d' /etc/sysctl.conf 2>/dev/null || true

# 写入优化配置
cat >> /etc/sysctl.conf <<EOF

# Xray 性能优化 ($(date))
# TCP 拥塞控制
net.core.default_qdisc=fq
net.ipv4.tcp_congestion_control=$BBR_VERSION

# TCP 快速打开
net.ipv4.tcp_fastopen=3

# TCP 性能优化
net.ipv4.tcp_slow_start_after_idle=0
net.ipv4.tcp_keepalive_time=600
net.ipv4.tcp_keepalive_intvl=30
net.ipv4.tcp_keepalive_probes=3
net.ipv4.tcp_mtu_probing=1
net.ipv4.tcp_timestamps=1
net.ipv4.tcp_window_scaling=1
net.ipv4.tcp_sack=1
net.ipv4.tcp_fack=1
net.ipv4.tcp_no_metrics_save=1
net.ipv4.tcp_moderate_rcvbuf=1

# 缓冲区优化（大幅提升吞吐量）
net.core.rmem_default=262144
net.core.rmem_max=536870912
net.core.wmem_default=262144
net.core.wmem_max=536870912
net.core.netdev_max_backlog=100000
net.core.somaxconn=65535
net.ipv4.tcp_rmem=4096 87380 536870912
net.ipv4.tcp_wmem=4096 65536 536870912
net.ipv4.tcp_mem=786432 1048576 26777216
net.ipv4.udp_rmem_min=8192
net.ipv4.udp_wmem_min=8192

# 连接数优化
fs.file-max=1000000
net.ipv4.ip_local_port_range=1024 65535
net.ipv4.tcp_max_syn_backlog=8192
net.ipv4.tcp_max_tw_buckets=5000

# 安全加固
net.ipv4.conf.all.rp_filter=1
net.ipv4.conf.default.rp_filter=1
net.ipv4.icmp_echo_ignore_broadcasts=1
net.ipv4.conf.all.accept_source_route=0
net.ipv4.conf.default.accept_source_route=0
net.ipv4.conf.all.accept_redirects=0
net.ipv4.conf.default.accept_redirects=0
net.ipv4.conf.all.secure_redirects=0
net.ipv4.conf.default.secure_redirects=0
net.ipv4.icmp_ignore_bogus_error_responses=1
net.ipv4.tcp_syncookies=1

# 转发优化
net.ipv4.ip_forward=1
net.ipv6.conf.all.forwarding=1

# 其他优化
vm.swappiness=10
kernel.pid_max=4194304
EOF

sysctl -p >/dev/null 2>&1
info "BBR 加速已启用 ($BBR_VERSION)"

# 设置系统限制
cat > /etc/security/limits.d/xray.conf <<EOF
* soft nofile 1000000
* hard nofile 1000000
* soft nproc 1000000
* hard nproc 1000000
root soft nofile 1000000
root hard nofile 1000000
root soft nproc 1000000
root hard nproc 1000000
EOF

# 生成客户端配置
info "生成客户端配置..."
mkdir -p "$CLIENT_DIR"

# VLESS 分享链接（包含 Vision 流控）
SHARE_LINK="vless://${USER_UUID}@${SERVER_IP}:${LISTEN_PORT}?encryption=none&flow=xtls-rprx-vision&security=reality&sni=${REALITY_DEST}&fp=chrome&pbk=${PUBLIC_KEY}&sid=${SHORT_ID}&type=tcp&headerType=none#Reality-Speed-${REALITY_DEST%%.*}"

cat > "$CLIENT_DIR/config.txt" <<EOF
╔════════════════════════════════════════════════════╗
║   VLESS Reality 配置信息 (速度优化增强版)         ║
╚════════════════════════════════════════════════════╝

【连接信息】
服务器地址: $SERVER_IP
端口: $LISTEN_PORT
UUID: $USER_UUID
传输协议: tcp
流控: xtls-rprx-vision (XTLS Vision - 关键性能优化)
安全类型: reality
SNI: $REALITY_DEST
Fingerprint: chrome
公钥: $PUBLIC_KEY
Short ID: $SHORT_ID

【性能优化】
✓ XTLS Vision 流控 - 大幅提升速度
✓ BBR 拥塞控制 - 已启用
✓ TCP Fast Open - 减少握手延迟
✓ TCP No Delay - 降低延迟
✓ 大缓冲区 - 提高吞吐量
✓ 内核参数优化 - 最大化性能
✓ 智能分流 - 国内直连

【防封措施】
✓ Reality 协议 - 流量完全伪装
✓ Nginx 伪装站 - 端口 80 可访问
✓ 多重回落 - 非法探测回落到伪装站
✓ 广告过滤 - 减少无用流量

【使用建议】
1. 客户端必须支持 XTLS Vision（最新版）
2. 启用 "允许不安全连接" 或 "跳过证书验证"
3. 建议使用分流规则（国内直连，国外代理）
4. Mux 多路复用：建议关闭（Reality 已经很快）
5. 避免 BT 下载（已自动屏蔽）

【客户端推荐】
• Windows: v2rayN (5.39+)
• Android: v2rayNG (1.8.5+) / NekoBox
• iOS: Shadowrocket (最新版) / Stash
• macOS: V2RayXS / V2RayU

【分享链接】
$SHARE_LINK

【速度测试建议】
- YouTube 4K 视频应流畅播放
- SpeedTest 应达到 50+ Mbps（取决于VPS带宽）
- 延迟应低于 200ms（取决于地理位置）

生成时间: $(date)
EOF

echo "$SHARE_LINK" > "$CLIENT_DIR/link.txt"

if command -v qrencode >/dev/null 2>&1; then
    qrencode -t ANSIUTF8 "$SHARE_LINK" > "$CLIENT_DIR/qr.txt" 2>/dev/null
fi

# 创建性能测试和管理脚本
cat > /usr/local/bin/vless <<'SCRIPT'
#!/bin/bash
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m'

case "$1" in
    start) 
        systemctl start xray nginx
        echo -e "${GREEN}服务已启动${NC}"
        ;;
    stop) 
        systemctl stop xray nginx
        echo -e "${YELLOW}服务已停止${NC}"
        ;;
    restart) 
        systemctl restart xray nginx
        echo -e "${GREEN}服务已重启${NC}"
        ;;
    status) 
        echo "=== Xray 状态 ==="
        systemctl status xray --no-pager -l
        echo ""
        echo "=== Nginx 状态 ==="
        systemctl status nginx --no-pager -l
        echo ""
        echo "=== 系统负载 ==="
        uptime
        echo ""
        echo "=== 网络连接数 ==="
        ss -s
        ;;
    log) 
        journalctl -u xray -f
        ;;
    config) 
        cat /root/vless-clients/config.txt
        ;;
    link) 
        cat /root/vless-clients/link.txt
        ;;
    qr) 
        cat /root/vless-clients/qr.txt 2>/dev/null || echo "二维码不存在"
        ;;
    test)
        echo -e "${CYAN}【系统性能测试】${NC}"
        echo ""
        echo "1. 测试伪装站点..."
        curl -s -o /dev/null -w "HTTP状态: %{http_code}, 响应时间: %{time_total}s\n" http://localhost
        echo ""
        echo "2. 测试 Xray 服务..."
        systemctl is-active xray && echo -e "${GREEN}✓ Xray 运行正常${NC}" || echo -e "${YELLOW}✗ Xray 未运行${NC}"
        systemctl is-active nginx && echo -e "${GREEN}✓ Nginx 运行正常${NC}" || echo -e "${YELLOW}✗ Nginx 未运行${NC}"
        echo ""
        echo "3. BBR 状态..."
        sysctl net.ipv4.tcp_congestion_control
        echo ""
        echo "4. 网络统计..."
        ss -s
        echo ""
        echo "5. CPU 和内存..."
        top -bn1 | head -5
        ;;
    speed)
        echo -e "${CYAN}【网络速度测试】${NC}"
        echo ""
        if command -v speedtest-cli >/dev/null 2>&1; then
            speedtest-cli --simple
        else
            echo "安装 speedtest-cli..."
            if command -v apt >/dev/null 2>&1; then
                apt install -y speedtest-cli
            elif command -v yum >/dev/null 2>&1; then
                yum install -y speedtest-cli
            fi
            speedtest-cli --simple
        fi
        ;;
    optimize)
        echo -e "${CYAN}【重新优化系统】${NC}"
        sysctl -p
        echo -e "${GREEN}✓ 系统参数已重新加载${NC}"
        ;;
    *)
        echo -e "${CYAN}VLESS Reality 管理工具 (速度优化版)${NC}"
        echo ""
        echo "用法: vless [命令]"
        echo ""
        echo "  start    - 启动服务"
        echo "  stop     - 停止服务"
        echo "  restart  - 重启服务"
        echo "  status   - 查看状态（含系统负载）"
        echo "  log      - 查看日志"
        echo "  config   - 显示配置"
        echo "  link     - 显示链接"
        echo "  qr       - 显示二维码"
        echo "  test     - 测试服务和性能"
        echo "  speed    - 网络速度测试"
        echo "  optimize - 重新优化系统"
        ;;
esac
SCRIPT

chmod +x /usr/local/bin/vless

# 显示结果
clear
echo ""
echo -e "${GREEN}╔═══════════════════════════════════════════╗${NC}"
echo -e "${GREEN}║     安装成功！(速度优化增强版)           ║${NC}"
echo -e "${GREEN}╚═══════════════════════════════════════════╝${NC}"
echo ""
echo -e "${CYAN}【服务器信息】${NC}"
echo "  IP: $SERVER_IP"
echo "  端口: $LISTEN_PORT"
echo "  伪装站: http://$SERVER_IP"
echo ""
echo -e "${CYAN}【性能优化】${NC}"
echo "  ✓ XTLS Vision 流控（关键性能提升）"
echo "  ✓ BBR 拥塞控制（$BBR_VERSION）"
echo "  ✓ TCP Fast Open（减少握手延迟）"
echo "  ✓ 大缓冲区优化（提升吞吐量）"
echo "  ✓ 内核参数调优（最大化性能）"
echo ""
echo -e "${CYAN}【防封特性】${NC}"
echo "  ✓ Reality 协议（流量完全伪装）"
echo "  ✓ Nginx 伪装站（80 端口）"
echo "  ✓ 智能回落（非法探测回落）"
echo "  ✓ 广告过滤（节省流量）"
echo ""
echo -e "${CYAN}【管理命令】${NC}"
echo "  vless config   - 查看完整配置"
echo "  vless link     - 显示分享链接"
echo "  vless qr       - 显示二维码"
echo "  vless test     - 测试服务和性能"
echo "  vless speed    - 网络速度测试"
echo "  vless status   - 查看状态（含负载）"
echo ""
echo -e "${CYAN}【重要提示】${NC}"
echo "  1. 客户端必须支持 XTLS Vision"
echo "  2. 流控选择: xtls-rprx-vision"
echo "  3. 建议配置国内直连分流规则"
echo "  4. 避免使用 Mux 多路复用"
echo ""
echo -e "${CYAN}【预期性能】${NC}"
echo "  • YouTube 4K: 流畅播放"
echo "  • 下载速度: 根据VPS带宽（通常50-500 Mbps）"
echo "  • 延迟: 取决于地理位置（通常 < 200ms）"
echo "  • 连接时间: < 3秒"
echo ""

if [[ -f "$CLIENT_DIR/qr.txt" ]]; then
    echo -e "${CYAN}【二维码】${NC}"
    cat "$CLIENT_DIR/qr.txt"
    echo ""
fi

echo -e "${CYAN}【分享链接】${NC}"
cat "$CLIENT_DIR/link.txt"
echo ""

info "配置文件: $CLIENT_DIR/config.txt"
info "运行 'vless test' 测试服务性能"
info "运行 'vless speed' 测试网络速度"
echo ""